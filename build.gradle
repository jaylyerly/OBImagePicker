buildscript {
    repositories {
				maven {
					//url('http://openbakery.org/repository/')
					url uri('/Users/rene/workspace/openbakery/xcodePlugin/repository')
					
				}
				mavenCentral()
    }
    dependencies {
        classpath group: 'org.openbakery', name: 'xcodePlugin', version: '0.9.+'
    }
}
apply plugin: 'xcode'


xcodebuild {
	scheme = 'OBImagePicker'
	workspace = 'OBImagePicker.xcworkspace'
  target = 'OBImagePicker'
	configuration = 'Debug'
	

}



task coverage(type:Exec, dependsOn:['test']) {

	doFirst {
		project.ext.coverageDirectory = new File('build/coverage')
		project.ext.coverageDirectory.mkdirs()
	

		ant.get(src: 'https://github.com/gcovr/gcovr/archive/3.1.zip', dest: 'build/coverage', verbose:true)
		ant.unzip(src: "build/coverage/3.1.zip",  dest:"build/coverage")
	
	}

	workingDir "."

	commandLine 'python', './build/coverage/gcovr-3.1/scripts/gcovr', '-e', '.*h$|.*UnitTests.*m$', '-r', '.', '--xml'

	ByteArrayOutputStream outputStream = new ByteArrayOutputStream()
	standardOutput = outputStream
 
 	doLast {
 		FileOutputStream fileStream = new FileOutputStream("build/coverage/coverage.xml");
		outputStream.writeTo(fileStream);
 	}
}



task continuous(dependsOn: 'xcodebuild')



gradle.taskGraph.whenReady { taskGraph ->

	if (taskGraph.hasTask(test)) {
		xcodebuild {
		
		
			destination {
				platform = 'iOS Simulator'
				name = 'iPad'
			}

			destination {
				platform = 'iOS Simulator'
				name = 'iPhone Retina (3.5-inch)'
			}
			
			destination {
				platform = 'iOS Simulator'
				name = 'iPhone Retina (4-inch)'
			}

			destination {
				platform = 'iOS Simulator'
				name = 'iPad Retina'
			}
			
			destination {
				platform = 'iOS Simulator'
				name = 'iPhone Retina (4-inch 64-bit)'
			}


		}
	
	}
}
